## Работа 5. Детектирование границ документов на кадрах видео
автор: Полевой Д.В.
дата: @time_stemp@

### Задание
0. текст, иллюстрации и подписи отчета придумываем самостоятельно
1. используем данные из лаб. 4
2. выделяем границы и находим внешнюю рамку документа
3. руками изготавливаем векторную разметку (идеальная рамка купюры)
4. оцениваем качество и анализируем ошибки

### Результаты
#### Исходные данные
Для работы была выбрана купюра номиналом 500 рублей, снятая на фотокамеру мобильного телефона.<br />
Съёмка проводилась при разном качестве освещения, в разных ракурсах на трёх фонах.
Всего отснято 7 видео роликов, из каждого ролика бралось по 3 кадра, обрабатывалось и сравнивалось с соответствующими эталонными масками, сделанными вручную.

Все кадры размером 1080х1920.

##### Примеры кадров:
<img src="frame7_1.png" width="200" />
<img src="frame5_1.png" width="200" />
<img src="frame3_1.png" width="200" />
<img src="frame4_1.png" width="200" />
<img src="frame5_1.png" width="200" />
<img src="frame6_1.png" width="200" />
<img src="frame7_1.png" width="200" />

#### Описание алгоритма детектирования
1. Извлечение трёх кадров из каждого ролика.<br />
<img src="frame7_1.png" width="200" />
<img src="frame5_1.png" width="200" />
<img src="frame3_1.png" width="200" />
2. Преобразование цветов в оттенки серого с помощью `cvtColor`.<br />
<img src="frame7_1_gray.png" width="200" />
<img src="frame5_1_gray.png" width="200" />
<img src="frame3_1_gray.png" width="200" />
3. Сглаживание изображения с ядром 3х3.<br />
<img src="frame7_1_blur.png" width="200" />
<img src="frame5_1_blur.png" width="200" />
<img src="frame3_1_blur.png" width="200" />
4. Бинаризация методом Отсу с параметрами `thresh == 180`, `maxval == 255`<br />
<img src="frame7_1_binary.png" width="200" />
<img src="frame5_1_binary.png" width="200" />
<img src="frame3_1_binary.png" width="200" />
5. Морфологическое открытие и закрытие с ядром 5х5<br />
<img src="frame7_1_edges.png" width="200" />
<img src="frame5_1_edges.png" width="200" />
<img src="frame3_1_edges.png" width="200" />
6. Поиск контуров на бинаризованном изображении с помощью функции `findContours` с параметрами `mode: cv::RETR_EXTERNAL` и `method: cv::CHAIN_APPROX_TC89_L1`<br />
<img src="frame7_1_all_contours.png" width="200" />
<img src="frame5_1_all_contours.png" width="200" />
<img src="frame3_1_all_contours.png" width="200" />
7. Аппроксимация полученных контуров с параметром `epsilon: 0.1 * P`<br />
8. Поиск самого большого по площади выпуклого контура, состоящего из 4-х вершин<br />
<img src="frame7_1_largest_contour.png" width="200" />
<img src="frame5_1_largest_contour.png" width="200" />
<img src="frame3_1_largest_contour.png" width="200" />
9. Сравнение с эталонным контуром<br />
<img src="frame7_1_diff.png" width="200" />
<img src="frame5_1_diff.png" width="200" />
<img src="frame3_1_diff.png" width="200" /><br/>
Зелёный контур - эталонный контур
Синий контур - сдетектированный контур

#### Оценка качества
Для оценки качества найденного контура высчитывалось отношение `max(norm(a - x) / P)`, где a - найденная точка, x - точка эталона, P - периметр эталонного контура.

| № | Изображение | Сравнение | Ошибка |
| ----------- | ----------- | ----------- | ----------- |
| 1  | <img src="frame1_1.png" width="100" /> | <img src="frame1_1_diff.png" width="100" /> | 0.0019 |
| 2  | <img src="frame1_2.png" width="100" /> | <img src="frame1_2_diff.png" width="100" /> | 0.0018 |
| 3  | <img src="frame1_3.png" width="100" /> | <img src="frame1_3_diff.png" width="100" /> | 0.0025 |
| 4  | <img src="frame2_1.png" width="100" /> | <img src="frame2_1_diff.png" width="100" /> | 0.0034 |
| 5  | <img src="frame2_2.png" width="100" /> | <img src="frame2_2_diff.png" width="100" /> | 0.0019 |
| 6  | <img src="frame2_3.png" width="100" /> | <img src="frame2_3_diff.png" width="100" /> | 0.0012 |
| 7  | <img src="frame3_1.png" width="100" /> | <img src="frame3_1_diff.png" width="100" /> | 0.0013 |
| 8  | <img src="frame3_2.png" width="100" /> | <img src="frame3_2_diff.png" width="100" /> | 0.0014 |
| 9  | <img src="frame3_3.png" width="100" /> | <img src="frame3_3_diff.png" width="100" /> | 0.0010 |
| 10 | <img src="frame4_1.png" width="100" /> | <img src="frame4_1_diff.png" width="100" /> | 0.0018 |
| 11 | <img src="frame4_2.png" width="100" /> | <img src="frame4_2_diff.png" width="100" /> | 0.0041 |
| 12 | <img src="frame4_3.png" width="100" /> | <img src="frame4_3_diff.png" width="100" /> | 0.0030 |
| 13 | <img src="frame5_1.png" width="100" /> | <img src="frame5_1_diff.png" width="100" /> | 0.2094 |
| 14 | <img src="frame5_2.png" width="100" /> | <img src="frame5_2_diff.png" width="100" /> | 0.2473 |
| 15 | <img src="frame5_3.png" width="100" /> | <img src="frame5_3_diff.png" width="100" /> | 0.2109 |
| 16 | <img src="frame6_1.png" width="100" /> | <img src="frame6_1_diff.png" width="100" /> | 0.0022 |
| 17 | <img src="frame6_2.png" width="100" /> | <img src="frame6_2_diff.png" width="100" /> | 0.0026 |
| 18 | <img src="frame6_3.png" width="100" /> | <img src="frame6_3_diff.png" width="100" /> | 0.0022 |
| 19 | <img src="frame7_1.png" width="100" /> | <img src="frame7_1_diff.png" width="100" /> | 0.0015 |
| 20 | <img src="frame7_2.png" width="100" /> | <img src="frame7_2_diff.png" width="100" /> | 0.0024 |
| 11 | <img src="frame7_3.png" width="100" /> | <img src="frame7_3_diff.png" width="100" /> | 0.0059 |

Средняя ошибка = 0.033791
Дисперсия = 0.1484


### Текст программы

```cpp
@cpp_source@
```